// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  resources   PostResources[]
  votes       PostVote[]
  bookmarks   PostBookmark[]
  comments    PostComment[]
}

model PostVote {
  id        Int      @id @default(autoincrement())
  voteType  Vote
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
}

model PostBookmark {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
}

model PostComment {
  id              Int      @id @default(autoincrement())
  postId          Int
  userId          String
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  parentCommentId Int?

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment PostComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies       PostComment[] @relation("CommentReplies")

  @@index([postId])
  @@index([parentCommentId])
}

model PostResources {
  id        Int      @id @default(autoincrement())
  postId    Int
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Post          Post[]
  PostComment   PostComment[]
  PostVote      PostVote[]
  PostBookmark  PostBookmark[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Vote {
  UP
  DOWN
}
